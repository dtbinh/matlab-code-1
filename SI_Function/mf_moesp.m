function [A, B, C, D] = mf_moesp(u, y, k, n)
%==========================================================================
% ◎ システム同定 - MOESP法 (SISO,MIMO対応)
%==========================================================================
% [A, B, C, D] = mf_moesp(u, y, k, n)
% u : 入力信号
% y : 出力信号
% k : データ行列の行数
% n : 状態変数の次数
% A(n*n), B(n*m), C(p*n), D(p*m) : 状態空間表現の行列

%--------------------------------------------------------------------------
% ● 入力と出力のデータ行列生成
%--------------------------------------------------------------------------
m = size(u,1);      % 入力の次数 uの1行目のサイズ
p = size(y,1);      % 出力の次数
% ui = m*k;           % 入力データ行列の行数
% uj = size(u,2)-k+1  % 入力データ行列の列数
% yi = p*k;           % 出力データ行列の行数
% yj = size(y,2)-k+1  % 出力データ行列の列数

% SISOの時のデータ行列
% tmp1 = u(:,1:k);
% tmp2 = u(:,k:end);
% U = hankel(tmp1,tmp2);
% tmp1 = y(:,1:k);
% tmp2 = y(:,k:end);
% Y = hankel(tmp1,tmp2);

% MIMOの時のデータ行列（こちらを使う）
U = zeros(m*k,size(u,2)-k+1);
for i = 1:k
    U(m*(i-1)+1:m*i,:) = u(:,i:size(u,2)-k+1 + i-1);
end
Y = zeros(p*k,size(y,2)-k+1);
for i = 1:k
    Y(p*(i-1)+1:p*i,:) = y(:,i:size(y,2)-k+1 + i-1);
end


%--------------------------------------------------------------------------
% ● LQ分解
%--------------------------------------------------------------------------
km = size(U,1);
kp = size(Y,1);
[Q, L] = qr([U;Y]',0);
Q = Q';
L = L';
L11 = L(1:km, 1:km);
L21 = L(km+1:km+kp, 1:km);
L22 = L(km+1:km+kp, km+1:km+kp);

%--------------------------------------------------------------------------
% ● SVD (sU*sS*sV' = L22)
% n : 状態変数の次数
%--------------------------------------------------------------------------
[sU, sS, sV] = svd(L22);
sU1 = sU(:, 1:n);
sS1 = sS(1:n, 1:n)
sV1 = sV(:, 1:n);  % 転置であることに注意
sU2 = sU(:, n+1:end);

%--------------------------------------------------------------------------
% ● 拡大可観測行列の算出
%--------------------------------------------------------------------------
Ok = sU1 * sqrt(sS1);

%--------------------------------------------------------------------------
% ● A,B,C,D の算出
%--------------------------------------------------------------------------
C = Ok(1:p, 1:n);
A = Ok(1:kp-p,:)\Ok(p+1:kp,:);

mat_l1 = []; %左側行列 1列目
mat_r = zeros((kp-n)*k, m); %右側行列 行と列のみ指定して、成分は0で埋める
mat_M = sU2' * L21 * L11^(-1);
sU2T = sU2';

for i = 1:k
    Li_Ok(i).m = sU2T(:, p*i+1:end)*Ok(1:p*(k-i),:);
    mat_l1 = [mat_l1; sU2T(:, p*(i-1)+1:p*i)];
    mat_r((kp-n)*(i-1)+1:(kp-n)*(i), 1:m) = mat_M(1:kp-n, m*(i-1)+1:m*i); %行列の再配置
end

mat_l2 = [];
for i = 1:k-1
    mat_l2 = [mat_l2; Li_Ok(i).m];
end
mat_l2 = [mat_l2; zeros(kp-n, size(Li_Ok(1).m,2))];
mat_l = [mat_l1 mat_l2];

% mat_res = (mat_l'*mat_l)^(-1)*mat_l'*mat_r;
mat_res = pinv(mat_l)*mat_r;
D = mat_res(1:p, 1:m);
B = mat_res(p+1:p+n, 1:m);

