%==========================================================================
% ◎ システム同定 - MOESP法
%==========================================================================
clear
close all

%--------------------------------------------------------------------------
% ● パラメータ
%--------------------------------------------------------------------------
% M系列
mP = 5; % M系列のmP段シフトレジスタ
mk = 2; % 最終段以外にフィードバックさせる信号 (-mk 番目)
%--------------------------------------------------------------------------
% ● M系列信号生成 v2
%--------------------------------------------------------------------------
x = randi([0 1], mP, 1);    % 状態の初期値をランダムに決定
x = [1 1 1 1 1]';
u = zeros(2^mP-1, 1);       % 出力変数の定義
for i = 1:2^mP-1            % 信号の生成
    x = [xor(x(mk),x(end));x(1:end-1)]; %フィードバック
    u(i) = x(1);
end
for i = 1:2^mP - 1          % 2値信号の値を0,1から-1,1に変更
    if u(i) == 1
        u(i)=1;
    else
        u(i)=-1;
    end
end

%--------------------------------------------------------------------------
% ● M系列信号生成 v1
%--------------------------------------------------------------------------
% clear x;
% input_m = 5;
% a = [0 1 0 0 1]';
% x0 = [1 1 1 1 1]';
% 
% x(1:2^input_m - 1,1) = 0;
% x = vertcat(x0,x);
% for i = 1:2^input_m - 1
%     tmp = xor(a(1) & x(i+input_m-1), a(2) & x(i+input_m-2));
%     for j = 3:input_m
%         tmp = xor(tmp, a(j) & x(i+input_m-j));
%     end
%     x(i+input_m) = tmp;
% end
% % M系列信号
% u = x(input_m+1:numel(x),1);
% for i = 1:2^input_m - 1
%     if u(i) == 1
%         u(i)=1;
%     else
%         u(i)=-1;
%     end
% end
% % M系列プロット
% figure(1)
% subplot(2,1,1);
% stem(u)
% subplot(2,1,2);
% stem(xcorr(u)/(2^mP-1))
% 
% figure(2)
% subplot(2,1,1);
% stem(uu)
% subplot(2,1,2);
% stem(xcorr(uu)/(2^mP-1))
% %M系列信号作成方法

%--------------------------------------------------------------------------
% ● 伝達関数と出力信号の生成
%--------------------------------------------------------------------------
% パラメータ
m = 1;      %入力の数
p = 1;      %出力の数
sample = 1; %サンプリング周波数
n = 1;      %状態変数の次数
k = 4;      %データ行列の行数

% フィボナッチ数列
% num = [1 0];              %伝達関数分子
% den = [1 -1 -1];            %伝達関数分母
% dP = tf(num,den,sample);

% 連続系を離散系に双一次変換したもの
num = [1];                  %伝達関数分子
den = [1 5];                %伝達関数分母
cP = tf(num,den);
dP = c2d(cP,sample,'tustin');
[y,t] = lsim(dP, u, 0:1:numel(u)-1);
% stem(t,u)
% hold on
% stem(t,y)

%--------------------------------------------------------------------------
% ● 入力と出力のデータ行列生成
% k : データ行列の行数
%--------------------------------------------------------------------------
tmp1 = u(1:k);
tmp2 = u(k:end);
U = hankel(tmp1,tmp2);
tmp1 = y(1:k);
tmp2 = y(k:end);
Y = hankel(tmp1,tmp2);

%--------------------------------------------------------------------------
% ● LQ分解
%--------------------------------------------------------------------------
km = size(U,1);
kp = size(Y,1);
[Q, L] = qr([U;Y]',0);
Q = Q';
L = L';
L11 = L(1:km, 1:km);
L21 = L(km+1:km+kp, 1:km);
L22 = L(km+1:km+kp, km+1:km+kp);

%--------------------------------------------------------------------------
% ● SVD
% n : 状態変数の次数
%--------------------------------------------------------------------------
[sU, sS, sV] = svd(L22);
sU1 = sU(:, 1:n);
sS1 = sS(1:n, 1:n);
sV1 = sV(:, 1:n);  % 転置であることに注意
sU2 = sU(:, n+1:end);

%--------------------------------------------------------------------------
% ● 可制御行列の算出
%--------------------------------------------------------------------------
Ok = sU1 * sqrt(sS1);

%--------------------------------------------------------------------------
% ● A,B,C,D の算出
%--------------------------------------------------------------------------
C = Ok(1:p, 1:n);
A = Ok(1:kp-p,:)\Ok(p+1:kp,:);

mat_l1 = []; %左側行列 1列目
mat_r = []; %右側行列
mmat_M = sU2' * L21 * L11^(-1);
for i = 1:k
%     Li(i).m = sU2(1+(i-1)*p:p+(i-1)*p,:)';
%     Li_(i).m = sU2(1+(i-1)*p:end,:)';
    Li_Ok(i).m = sU2(1+(i-1)*p:end,:)'*Ok(1:k-i+1);
    mat_l1 = [mat_l1; sU2(1+(i-1)*p:p+(i-1)*p,:)'];
    mat_r = [mat_r; mat_M(:,m*(i-1)+1:m*i)];
end
mat_l2 = [];
for i = 2:k
    mat_l2 = [mat_l2; Li_Ok(i).m];
end
mat_l2 = [mat_l2; zeros(size(Li_Ok(1).m))];
mat_l = [mat_l1 mat_l2];

mat_res = (mat_l'*mat_l)^(-1)*mat_l'*mat_r;
D = mat_res(1:p, 1:m);
B = mat_res(p+1:p+n, 1:m);

%--------------------------------------------------------------------------
% ● 伝達関数の算出
%--------------------------------------------------------------------------
[num den] = ss2tf(A,B,C,D);
dP_est = tf(num,den,sample);

dP
dP_est

%--------------------------------------------------------------------------
% ● プロット
%--------------------------------------------------------------------------
% fig1 = figure(1);
% hold on;
% [vec,t] = impulse(dP,5);
% [vec2,t] = impulse(dP_est,5);
% 
% stem(t,vec);
% stem(t,vec2);
% 
% set(gca,'FontName','arial','FontSize',14)
% xlabel('time [s]','FontName','arial','FontSize',16)
% ylabel('out','FontName','arial','FontSize',16)
% legend('true','estimate')
% set(legend,'FontName','arial','FontSize',14)





