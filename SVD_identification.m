clear
close all

% sim('SVD.slx');

%--------------------------------------------------------------------------
% ● インパルス応答生成
%--------------------------------------------------------------------------
% パラメータ
m = 1;      %入力の数
p = 1;      %出力の数
sample = 0.1; %サンプリング周波数

num = [1];              %伝達関数分子
den = [1 3];            %伝達関数分母
cP = tf(num,den);
dP = c2d(cP,sample,'tustin');

[vec,t] = impulse(dP,5);

%stem(t,vec);

%--------------------------------------------------------------------------
% ● インパルス応答からハンケル行列を生成(i行j列)
% i : vec
% o : H
%--------------------------------------------------------------------------
% パラメータ
i = 20;
% ベクトルを分解
c = vec(1:i);
r = vec(i:numel(vec));
% ハンケル行列作成
H = hankel(c,r);

%--------------------------------------------------------------------------
% ● 特異値分解SVD
%--------------------------------------------------------------------------
[U,S,V] = svd(H);

%--------------------------------------------------------------------------
% ● 不要な成分を取り出す
%       最初の要素のX%未満の成分を持つ要素を全て除去する
%--------------------------------------------------------------------------
% パラメータ
% Xを指定 (1で100%)
X = 0.5;

com_st = S(1,1); %component_standard : 基準要素
for i = 1:min(size(S))
    if S(i,i) < com_st*X
        Ss = S(1:i-1,1:i-1);    % 信号空間の抽出
        break;
    end
end
Us = U(:,1:i-1);
Vs = V(1:i-1,:);

%--------------------------------------------------------------------------
% ● 可制御行列 Gamma, 可観測行列 Omega を算出
%--------------------------------------------------------------------------
Ss_sqrt = sqrt(Ss);     % Ssの平方根を算出
Gamma = Us*Ss_sqrt;
Omega = Ss_sqrt*Vs;

%--------------------------------------------------------------------------
% ● 行列 A, B, C, D の算出
%--------------------------------------------------------------------------
Gamma1 = Gamma(1:size(Gamma,1)-1,:);
Gamma2 = Gamma(2:size(Gamma,1),:);

A = (Gamma1'*Gamma1)^(-1)*Gamma1'*Gamma2;
B = Omega(1:size(A,1),1:m);
C = Gamma(1:p,1:size(A,1));
D = vec(1);

%--------------------------------------------------------------------------
% ● 伝達関数の算出
%--------------------------------------------------------------------------
dP_est_ss = ss(A,B,C,D,sample);
dP_est = tf(dP_est_ss);

%--------------------------------------------------------------------------
% ● プロット
%--------------------------------------------------------------------------
fig1 = figure(1);
hold on;
[vec,t] = impulse(dP,5);
[vec2,t] = impulse(dP_est,5);

stem(t,vec);
stem(t,vec2);

set(gca,'FontName','arial','FontSize',14)
xlabel('time [s]','FontName','arial','FontSize',16)
ylabel('out','FontName','arial','FontSize',16)
legend('true','estimate')
set(legend,'FontName','arial','FontSize',14)




